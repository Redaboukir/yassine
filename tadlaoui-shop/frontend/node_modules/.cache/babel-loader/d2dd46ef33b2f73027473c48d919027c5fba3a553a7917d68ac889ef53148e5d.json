{"ast":null,"code":"import{initializeApp}from\"firebase/app\";import{getAuth,GoogleAuthProvider,signInWithPopup,signOut,createUserWithEmailAndPassword,signInWithEmailAndPassword,sendPasswordResetEmail// Importe sendPasswordResetEmail\n}from\"firebase/auth\";// Configuration Firebase\nconst firebaseConfig={apiKey:\"AIzaSyAsMUDuLqtGd5rN3_MT-ZPw7_bFwv9TyNs\",authDomain:\"yassine-f635d.firebaseapp.com\",projectId:\"yassine-f635d\",storageBucket:\"yassine-f635d.firebasestorage.app\",messagingSenderId:\"547676971822\",appId:\"1:547676971822:web:a361858902b86fd455d0bf\",measurementId:\"G-3HHF2FK0E2\"};// Initialiser Firebase\nconst app=initializeApp(firebaseConfig);// Authentification Firebase\nexport const auth=getAuth(app);export const googleProvider=new GoogleAuthProvider();// Fonction d'authentification avec Google\nexport const signInWithGoogle=async()=>{try{const result=await signInWithPopup(auth,googleProvider);const user=result.user;console.log(user);}catch(error){console.error(error);}};// Authentification par email et mot de passe\nexport const signUpWithEmailPassword=(email,password)=>{return createUserWithEmailAndPassword(auth,email,password);};export const signInWithEmailPassword=(email,password)=>{return signInWithEmailAndPassword(auth,email,password);};// Fonction pour envoyer un email de réinitialisation de mot de passe\nexport const sendPasswordReset=async email=>{try{await sendPasswordResetEmail(auth,email);// Utilise sendPasswordResetEmail\nalert(\"Un email de réinitialisation de mot de passe a été envoyé !\");}catch(error){console.error(\"Erreur lors de l'envoi de l'email de réinitialisation:\",error);throw error;}};// Déconnexion\nexport const signOutUser=()=>{return signOut(auth);};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","signOut","createUserWithEmailAndPassword","signInWithEmailAndPassword","sendPasswordResetEmail","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","googleProvider","signInWithGoogle","result","user","console","log","error","signUpWithEmailPassword","email","password","signInWithEmailPassword","sendPasswordReset","alert","signOutUser"],"sources":["C:/Users/Redab/Desktop/TADLAOUI-SHOP/tadlaoui-shop/frontend/src/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n  getAuth,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  signOut,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  sendPasswordResetEmail, // Importe sendPasswordResetEmail\r\n} from \"firebase/auth\";\r\n\r\n// Configuration Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAsMUDuLqtGd5rN3_MT-ZPw7_bFwv9TyNs\",\r\n  authDomain: \"yassine-f635d.firebaseapp.com\",\r\n  projectId: \"yassine-f635d\",\r\n  storageBucket: \"yassine-f635d.firebasestorage.app\",\r\n  messagingSenderId: \"547676971822\",\r\n  appId: \"1:547676971822:web:a361858902b86fd455d0bf\",\r\n  measurementId: \"G-3HHF2FK0E2\",\r\n};\r\n\r\n// Initialiser Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Authentification Firebase\r\nexport const auth = getAuth(app);\r\nexport const googleProvider = new GoogleAuthProvider();\r\n\r\n// Fonction d'authentification avec Google\r\nexport const signInWithGoogle = async () => {\r\n  try {\r\n    const result = await signInWithPopup(auth, googleProvider);\r\n    const user = result.user;\r\n    console.log(user);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n// Authentification par email et mot de passe\r\nexport const signUpWithEmailPassword = (email, password) => {\r\n  return createUserWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signInWithEmailPassword = (email, password) => {\r\n  return signInWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\n// Fonction pour envoyer un email de réinitialisation de mot de passe\r\nexport const sendPasswordReset = async (email) => {\r\n  try {\r\n    await sendPasswordResetEmail(auth, email); // Utilise sendPasswordResetEmail\r\n    alert(\"Un email de réinitialisation de mot de passe a été envoyé !\");\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de l'envoi de l'email de réinitialisation:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Déconnexion\r\nexport const signOutUser = () => {\r\n  return signOut(auth);\r\n};"],"mappings":"AAAA,OAASA,aAAa,KAAQ,cAAc,CAC5C,OACEC,OAAO,CACPC,kBAAkB,CAClBC,eAAe,CACfC,OAAO,CACPC,8BAA8B,CAC9BC,0BAA0B,CAC1BC,sBAAwB;AAAA,KACnB,eAAe,CAEtB;AACA,KAAM,CAAAC,cAAc,CAAG,CACrBC,MAAM,CAAE,yCAAyC,CACjDC,UAAU,CAAE,+BAA+B,CAC3CC,SAAS,CAAE,eAAe,CAC1BC,aAAa,CAAE,mCAAmC,CAClDC,iBAAiB,CAAE,cAAc,CACjCC,KAAK,CAAE,2CAA2C,CAClDC,aAAa,CAAE,cACjB,CAAC,CAED;AACA,KAAM,CAAAC,GAAG,CAAGhB,aAAa,CAACQ,cAAc,CAAC,CAEzC;AACA,MAAO,MAAM,CAAAS,IAAI,CAAGhB,OAAO,CAACe,GAAG,CAAC,CAChC,MAAO,MAAM,CAAAE,cAAc,CAAG,GAAI,CAAAhB,kBAAkB,CAAC,CAAC,CAEtD;AACA,MAAO,MAAM,CAAAiB,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CAC1C,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAjB,eAAe,CAACc,IAAI,CAAEC,cAAc,CAAC,CAC1D,KAAM,CAAAG,IAAI,CAAGD,MAAM,CAACC,IAAI,CACxBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CACnB,CAAE,MAAOG,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC,CACtB,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,uBAAuB,CAAGA,CAACC,KAAK,CAAEC,QAAQ,GAAK,CAC1D,MAAO,CAAAtB,8BAA8B,CAACY,IAAI,CAAES,KAAK,CAAEC,QAAQ,CAAC,CAC9D,CAAC,CAED,MAAO,MAAM,CAAAC,uBAAuB,CAAGA,CAACF,KAAK,CAAEC,QAAQ,GAAK,CAC1D,MAAO,CAAArB,0BAA0B,CAACW,IAAI,CAAES,KAAK,CAAEC,QAAQ,CAAC,CAC1D,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,iBAAiB,CAAG,KAAO,CAAAH,KAAK,EAAK,CAChD,GAAI,CACF,KAAM,CAAAnB,sBAAsB,CAACU,IAAI,CAAES,KAAK,CAAC,CAAE;AAC3CI,KAAK,CAAC,6DAA6D,CAAC,CACtE,CAAE,MAAON,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,wDAAwD,CAAEA,KAAK,CAAC,CAC9E,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,WAAW,CAAGA,CAAA,GAAM,CAC/B,MAAO,CAAA3B,OAAO,CAACa,IAAI,CAAC,CACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}