{"ast":null,"code":"// Importer les fonctions nécessaires de Firebase SDK\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\n// Configuration de Firebase\nconst firebaseConfig = {\n  apiKey: \"YOUR_API_KEY\",\n  authDomain: \"yassine-f635d.firebaseapp.com\",\n  projectId: \"yassine-f635d\",\n  storageBucket: \"yassine-f635d.firebasestorage.app\",\n  messagingSenderId: \"547676971822\",\n  appId: \"1:547676971822:web:a361858902b86fd455d0bf\",\n  measurementId: \"G-3HHF2FK0E2\"\n};\n\n// Initialisation de Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\n// Google Auth Provider\nconst googleProvider = new GoogleAuthProvider();\n\n// Fonction de connexion avec Google\nexport const signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    const user = result.user;\n    console.log(\"Utilisateur connecté avec Google : \", user);\n    return user;\n  } catch (error) {\n    console.error(\"Erreur de connexion Google : \", error.message);\n  }\n};\n\n// Fonction de déconnexion\nexport const signOutUser = () => {\n  signOut(auth).then(() => {\n    console.log(\"Utilisateur déconnecté\");\n  }).catch(error => {\n    console.error(\"Erreur de déconnexion : \", error.message);\n  });\n};\n\n// Fonction pour l'inscription avec email et mot de passe\nexport const signUpWithEmailPassword = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    console.log(\"Utilisateur inscrit avec Email : \", user);\n    return user;\n  } catch (error) {\n    console.error(\"Erreur d'inscription : \", error.message);\n  }\n};\n\n// Fonction pour se connecter avec email et mot de passe\nexport const signInWithEmailPassword = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    console.log(\"Utilisateur connecté avec Email : \", user);\n    return user;\n  } catch (error) {\n    console.error(\"Erreur de connexion Email : \", error.message);\n  }\n};\nexport default Login;","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","signOut","createUserWithEmailAndPassword","signInWithEmailAndPassword","getFirestore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","googleProvider","signInWithGoogle","result","user","console","log","error","message","signOutUser","then","catch","signUpWithEmailPassword","email","password","userCredential","signInWithEmailPassword","Login"],"sources":["C:/Users/Redab/Desktop/TADLAOUI-SHOP/tadlaoui-shop/src/pages/Login.js"],"sourcesContent":["// Importer les fonctions nécessaires de Firebase SDK\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n// Configuration de Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"YOUR_API_KEY\",\r\n  authDomain: \"yassine-f635d.firebaseapp.com\",\r\n  projectId: \"yassine-f635d\",\r\n  storageBucket: \"yassine-f635d.firebasestorage.app\",\r\n  messagingSenderId: \"547676971822\",\r\n  appId: \"1:547676971822:web:a361858902b86fd455d0bf\",\r\n  measurementId: \"G-3HHF2FK0E2\"\r\n};\r\n\r\n// Initialisation de Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\n\r\n// Google Auth Provider\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\n// Fonction de connexion avec Google\r\nexport const signInWithGoogle = async () => {\r\n  try {\r\n    const result = await signInWithPopup(auth, googleProvider);\r\n    const user = result.user;\r\n    console.log(\"Utilisateur connecté avec Google : \", user);\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\"Erreur de connexion Google : \", error.message);\r\n  }\r\n};\r\n\r\n// Fonction de déconnexion\r\nexport const signOutUser = () => {\r\n  signOut(auth)\r\n    .then(() => {\r\n      console.log(\"Utilisateur déconnecté\");\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Erreur de déconnexion : \", error.message);\r\n    });\r\n};\r\n\r\n// Fonction pour l'inscription avec email et mot de passe\r\nexport const signUpWithEmailPassword = async (email, password) => {\r\n  try {\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n    console.log(\"Utilisateur inscrit avec Email : \", user);\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\"Erreur d'inscription : \", error.message);\r\n  }\r\n};\r\n\r\n// Fonction pour se connecter avec email et mot de passe\r\nexport const signInWithEmailPassword = async (email, password) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n    console.log(\"Utilisateur connecté avec Email : \", user);\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\"Erreur de connexion Email : \", error.message);\r\n  }\r\n};\r\nexport default Login;"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,OAAO,EAAEC,8BAA8B,EAAEC,0BAA0B,QAAQ,eAAe;AACjJ,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,cAAc;EACtBC,UAAU,EAAE,+BAA+B;EAC3CC,SAAS,EAAE,eAAe;EAC1BC,aAAa,EAAE,mCAAmC;EAClDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGhB,aAAa,CAACQ,cAAc,CAAC;AACzC,MAAMS,IAAI,GAAGhB,OAAO,CAACe,GAAG,CAAC;;AAEzB;AACA,MAAME,cAAc,GAAG,IAAIhB,kBAAkB,CAAC,CAAC;;AAE/C;AACA,OAAO,MAAMiB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMjB,eAAe,CAACc,IAAI,EAAEC,cAAc,CAAC;IAC1D,MAAMG,IAAI,GAAGD,MAAM,CAACC,IAAI;IACxBC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEF,IAAI,CAAC;IACxD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACC,OAAO,CAAC;EAC/D;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC/BtB,OAAO,CAACa,IAAI,CAAC,CACVU,IAAI,CAAC,MAAM;IACVL,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC,CAAC,CACDK,KAAK,CAAEJ,KAAK,IAAK;IAChBF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACC,OAAO,CAAC;EAC1D,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMI,uBAAuB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAChE,IAAI;IACF,MAAMC,cAAc,GAAG,MAAM3B,8BAA8B,CAACY,IAAI,EAAEa,KAAK,EAAEC,QAAQ,CAAC;IAClF,MAAMV,IAAI,GAAGW,cAAc,CAACX,IAAI;IAChCC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,IAAI,CAAC;IACtD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACC,OAAO,CAAC;EACzD;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,uBAAuB,GAAG,MAAAA,CAAOH,KAAK,EAAEC,QAAQ,KAAK;EAChE,IAAI;IACF,MAAMC,cAAc,GAAG,MAAM1B,0BAA0B,CAACW,IAAI,EAAEa,KAAK,EAAEC,QAAQ,CAAC;IAC9E,MAAMV,IAAI,GAAGW,cAAc,CAACX,IAAI;IAChCC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,IAAI,CAAC;IACvD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACC,OAAO,CAAC;EAC9D;AACF,CAAC;AACD,eAAeS,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}